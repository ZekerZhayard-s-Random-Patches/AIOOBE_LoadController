buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.0-SNAPSHOT"
group= "io.github.zekerzhayard" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AIOOBE_LoadController"

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "run"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

sourceSets {
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

sourceCompatibility = targetCompatibility = "1.7" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.7"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "aioobe_loadcontroller",
                "Specification-Vendor"    : "ZekerZhayard",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "ZekerZhayard",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin"           : "io.github.zekerzhayard.aioobe_loadcontroller.core.FMLLoadingPlugin"
        ])
    }
}

tasks.genIntellijRuns.doFirst {
    def workspaceFile = file(".idea/workspace.xml")
    workspaceFile.parentFile.mkdirs()
    if (!workspaceFile.exists()) {
        workspaceFile.write("""\
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
            <component name="RunManager">
            </component>
        </project>
        """.stripIndent())
    } else {
        def workspace = new XmlParser().parse(workspaceFile)
        def runManager = workspace.component.findAll({ it.@name == "RunManager" })
        if (runManager.size() == 0) {
            // When IDEA first imported the project, the RunManager node didn't exist.
            workspace.appendNode("component", ["name": "RunManager"])
        } else {
            // The genIntellijRuns task doesn't delete old run configurations, this is bad.
            runManager.each {
                it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each { configuration ->
                    it.remove(configuration)
                }
            }
        }
        new PrintWriter(new FileWriter(workspaceFile)).withCloseable {
            new XmlNodePrinter(it).print(workspace)
        }
    }
}

tasks.genIntellijRuns.doLast {
    def workspaceFile = file(".idea/workspace.xml")
    def workspace = new XmlParser().parse(workspaceFile)
    workspace.component.findAll({ it.@name == "RunManager" }).each {
        it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each {
            // The module name specified in the run configuration generated by the genIntellijRuns task is wrong.
            it.module.@name = project.idea.module.name + '.main'
            it.option.findAll({ it.@name == "VM_PARAMETERS" }).each {
                it.@value += " -Dfml.coreMods.load=io.github.zekerzhayard.aioobe_loadcontroller.core.FMLLoadingPlugin -Dlegacy.debugClassLoading=true -Dlegacy.debugClassLoadingSave=true"
            }
        }
    }
    new PrintWriter(new FileWriter(workspaceFile)).withCloseable {
        new XmlNodePrinter(it).print(workspace)
    }
}
